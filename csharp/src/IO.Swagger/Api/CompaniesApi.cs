/* 
 * API Cadastro
 *
 * Teste para workflow API-based:   - Restlet gera API e exporta swagger.json   - NSwag importa arquivo e gera server stub e client class    
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompaniesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Company
        /// </summary>
        /// <remarks>
        /// Deletes a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns></returns>
        void CompaniesCompanyidDelete (string companyid);

        /// <summary>
        /// Delete a Company
        /// </summary>
        /// <remarks>
        /// Deletes a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompaniesCompanyidDeleteWithHttpInfo (string companyid);
        /// <summary>
        /// Load an individual Company
        /// </summary>
        /// <remarks>
        /// Loads a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Company</returns>
        Company CompaniesCompanyidGet (string companyid);

        /// <summary>
        /// Load an individual Company
        /// </summary>
        /// <remarks>
        /// Loads a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>ApiResponse of Company</returns>
        ApiResponse<Company> CompaniesCompanyidGetWithHttpInfo (string companyid);
        /// <summary>
        /// Update a Company
        /// </summary>
        /// <remarks>
        /// Stores a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>Company</returns>
        Company CompaniesCompanyidPut (string companyid, Company body);

        /// <summary>
        /// Update a Company
        /// </summary>
        /// <remarks>
        /// Stores a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Company</returns>
        ApiResponse<Company> CompaniesCompanyidPutWithHttpInfo (string companyid, Company body);
        /// <summary>
        /// Load the list of Companies
        /// </summary>
        /// <remarks>
        /// Loads a list of Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>List&lt;Company&gt;</returns>
        List<Company> CompaniesGet (int? size = null, decimal? page = null, string sort = null, string name = null);

        /// <summary>
        /// Load the list of Companies
        /// </summary>
        /// <remarks>
        /// Loads a list of Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>ApiResponse of List&lt;Company&gt;</returns>
        ApiResponse<List<Company>> CompaniesGetWithHttpInfo (int? size = null, decimal? page = null, string sort = null, string name = null);
        /// <summary>
        /// Create a new Company
        /// </summary>
        /// <remarks>
        /// Adds a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Company</returns>
        Company CompaniesPost (Company body);

        /// <summary>
        /// Create a new Company
        /// </summary>
        /// <remarks>
        /// Adds a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Company</returns>
        ApiResponse<Company> CompaniesPostWithHttpInfo (Company body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Company
        /// </summary>
        /// <remarks>
        /// Deletes a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompaniesCompanyidDeleteAsync (string companyid);

        /// <summary>
        /// Delete a Company
        /// </summary>
        /// <remarks>
        /// Deletes a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompaniesCompanyidDeleteAsyncWithHttpInfo (string companyid);
        /// <summary>
        /// Load an individual Company
        /// </summary>
        /// <remarks>
        /// Loads a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of Company</returns>
        System.Threading.Tasks.Task<Company> CompaniesCompanyidGetAsync (string companyid);

        /// <summary>
        /// Load an individual Company
        /// </summary>
        /// <remarks>
        /// Loads a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of ApiResponse (Company)</returns>
        System.Threading.Tasks.Task<ApiResponse<Company>> CompaniesCompanyidGetAsyncWithHttpInfo (string companyid);
        /// <summary>
        /// Update a Company
        /// </summary>
        /// <remarks>
        /// Stores a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>Task of Company</returns>
        System.Threading.Tasks.Task<Company> CompaniesCompanyidPutAsync (string companyid, Company body);

        /// <summary>
        /// Update a Company
        /// </summary>
        /// <remarks>
        /// Stores a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Company)</returns>
        System.Threading.Tasks.Task<ApiResponse<Company>> CompaniesCompanyidPutAsyncWithHttpInfo (string companyid, Company body);
        /// <summary>
        /// Load the list of Companies
        /// </summary>
        /// <remarks>
        /// Loads a list of Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>Task of List&lt;Company&gt;</returns>
        System.Threading.Tasks.Task<List<Company>> CompaniesGetAsync (int? size = null, decimal? page = null, string sort = null, string name = null);

        /// <summary>
        /// Load the list of Companies
        /// </summary>
        /// <remarks>
        /// Loads a list of Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Company&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Company>>> CompaniesGetAsyncWithHttpInfo (int? size = null, decimal? page = null, string sort = null, string name = null);
        /// <summary>
        /// Create a new Company
        /// </summary>
        /// <remarks>
        /// Adds a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Company</returns>
        System.Threading.Tasks.Task<Company> CompaniesPostAsync (Company body);

        /// <summary>
        /// Create a new Company
        /// </summary>
        /// <remarks>
        /// Adds a Company
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Company)</returns>
        System.Threading.Tasks.Task<ApiResponse<Company>> CompaniesPostAsyncWithHttpInfo (Company body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompaniesApi : ICompaniesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompaniesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompaniesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a Company Deletes a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns></returns>
        public void CompaniesCompanyidDelete (string companyid)
        {
             CompaniesCompanyidDeleteWithHttpInfo(companyid);
        }

        /// <summary>
        /// Delete a Company Deletes a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CompaniesCompanyidDeleteWithHttpInfo (string companyid)
        {
            // verify the required parameter 'companyid' is set
            if (companyid == null)
                throw new ApiException(400, "Missing required parameter 'companyid' when calling CompaniesApi->CompaniesCompanyidDelete");

            var localVarPath = "/companies/{companyid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyid != null) localVarPathParams.Add("companyid", Configuration.ApiClient.ParameterToString(companyid)); // path parameter

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Company Deletes a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompaniesCompanyidDeleteAsync (string companyid)
        {
             await CompaniesCompanyidDeleteAsyncWithHttpInfo(companyid);

        }

        /// <summary>
        /// Delete a Company Deletes a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CompaniesCompanyidDeleteAsyncWithHttpInfo (string companyid)
        {
            // verify the required parameter 'companyid' is set
            if (companyid == null)
                throw new ApiException(400, "Missing required parameter 'companyid' when calling CompaniesApi->CompaniesCompanyidDelete");

            var localVarPath = "/companies/{companyid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyid != null) localVarPathParams.Add("companyid", Configuration.ApiClient.ParameterToString(companyid)); // path parameter

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Load an individual Company Loads a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Company</returns>
        public Company CompaniesCompanyidGet (string companyid)
        {
             ApiResponse<Company> localVarResponse = CompaniesCompanyidGetWithHttpInfo(companyid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load an individual Company Loads a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>ApiResponse of Company</returns>
        public ApiResponse< Company > CompaniesCompanyidGetWithHttpInfo (string companyid)
        {
            // verify the required parameter 'companyid' is set
            if (companyid == null)
                throw new ApiException(400, "Missing required parameter 'companyid' when calling CompaniesApi->CompaniesCompanyidGet");

            var localVarPath = "/companies/{companyid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyid != null) localVarPathParams.Add("companyid", Configuration.ApiClient.ParameterToString(companyid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Company>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Company) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Company)));
            
        }

        /// <summary>
        /// Load an individual Company Loads a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of Company</returns>
        public async System.Threading.Tasks.Task<Company> CompaniesCompanyidGetAsync (string companyid)
        {
             ApiResponse<Company> localVarResponse = await CompaniesCompanyidGetAsyncWithHttpInfo(companyid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load an individual Company Loads a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <returns>Task of ApiResponse (Company)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Company>> CompaniesCompanyidGetAsyncWithHttpInfo (string companyid)
        {
            // verify the required parameter 'companyid' is set
            if (companyid == null)
                throw new ApiException(400, "Missing required parameter 'companyid' when calling CompaniesApi->CompaniesCompanyidGet");

            var localVarPath = "/companies/{companyid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyid != null) localVarPathParams.Add("companyid", Configuration.ApiClient.ParameterToString(companyid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Company>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Company) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Company)));
            
        }

        /// <summary>
        /// Update a Company Stores a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>Company</returns>
        public Company CompaniesCompanyidPut (string companyid, Company body)
        {
             ApiResponse<Company> localVarResponse = CompaniesCompanyidPutWithHttpInfo(companyid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Company Stores a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Company</returns>
        public ApiResponse< Company > CompaniesCompanyidPutWithHttpInfo (string companyid, Company body)
        {
            // verify the required parameter 'companyid' is set
            if (companyid == null)
                throw new ApiException(400, "Missing required parameter 'companyid' when calling CompaniesApi->CompaniesCompanyidPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompaniesApi->CompaniesCompanyidPut");

            var localVarPath = "/companies/{companyid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyid != null) localVarPathParams.Add("companyid", Configuration.ApiClient.ParameterToString(companyid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Company>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Company) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Company)));
            
        }

        /// <summary>
        /// Update a Company Stores a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>Task of Company</returns>
        public async System.Threading.Tasks.Task<Company> CompaniesCompanyidPutAsync (string companyid, Company body)
        {
             ApiResponse<Company> localVarResponse = await CompaniesCompanyidPutAsyncWithHttpInfo(companyid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Company Stores a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyid">Identifier of the Company</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Company)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Company>> CompaniesCompanyidPutAsyncWithHttpInfo (string companyid, Company body)
        {
            // verify the required parameter 'companyid' is set
            if (companyid == null)
                throw new ApiException(400, "Missing required parameter 'companyid' when calling CompaniesApi->CompaniesCompanyidPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompaniesApi->CompaniesCompanyidPut");

            var localVarPath = "/companies/{companyid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyid != null) localVarPathParams.Add("companyid", Configuration.ApiClient.ParameterToString(companyid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Company>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Company) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Company)));
            
        }

        /// <summary>
        /// Load the list of Companies Loads a list of Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>List&lt;Company&gt;</returns>
        public List<Company> CompaniesGet (int? size = null, decimal? page = null, string sort = null, string name = null)
        {
             ApiResponse<List<Company>> localVarResponse = CompaniesGetWithHttpInfo(size, page, sort, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load the list of Companies Loads a list of Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>ApiResponse of List&lt;Company&gt;</returns>
        public ApiResponse< List<Company> > CompaniesGetWithHttpInfo (int? size = null, decimal? page = null, string sort = null, string name = null)
        {

            var localVarPath = "/companies/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("$size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("$page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (sort != null) localVarQueryParams.Add("$sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Company>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Company>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Company>)));
            
        }

        /// <summary>
        /// Load the list of Companies Loads a list of Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>Task of List&lt;Company&gt;</returns>
        public async System.Threading.Tasks.Task<List<Company>> CompaniesGetAsync (int? size = null, decimal? page = null, string sort = null, string name = null)
        {
             ApiResponse<List<Company>> localVarResponse = await CompaniesGetAsyncWithHttpInfo(size, page, sort, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load the list of Companies Loads a list of Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;age ASC,height DESC (optional)</param>
        /// <param name="name">Allows to filter the collections of result by the value of field name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Company&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Company>>> CompaniesGetAsyncWithHttpInfo (int? size = null, decimal? page = null, string sort = null, string name = null)
        {

            var localVarPath = "/companies/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("$size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("$page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (sort != null) localVarQueryParams.Add("$sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Company>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Company>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Company>)));
            
        }

        /// <summary>
        /// Create a new Company Adds a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Company</returns>
        public Company CompaniesPost (Company body)
        {
             ApiResponse<Company> localVarResponse = CompaniesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Company Adds a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Company</returns>
        public ApiResponse< Company > CompaniesPostWithHttpInfo (Company body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompaniesApi->CompaniesPost");

            var localVarPath = "/companies/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Company>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Company) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Company)));
            
        }

        /// <summary>
        /// Create a new Company Adds a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Company</returns>
        public async System.Threading.Tasks.Task<Company> CompaniesPostAsync (Company body)
        {
             ApiResponse<Company> localVarResponse = await CompaniesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Company Adds a Company
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Company)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Company>> CompaniesPostAsyncWithHttpInfo (Company body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompaniesApi->CompaniesPost");

            var localVarPath = "/companies/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Company>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Company) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Company)));
            
        }

    }
}

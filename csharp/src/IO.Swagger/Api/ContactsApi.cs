/* 
 * API Cadastro
 *
 * Teste para workflow API-based:   - Restlet gera API e exporta swagger.json   - NSwag importa arquivo e gera server stub e client class    
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Contact
        /// </summary>
        /// <remarks>
        /// Deletes a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns></returns>
        void ContactsContactidDelete (string contactid);

        /// <summary>
        /// Delete a Contact
        /// </summary>
        /// <remarks>
        /// Deletes a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactsContactidDeleteWithHttpInfo (string contactid);
        /// <summary>
        /// Load an individual Contact
        /// </summary>
        /// <remarks>
        /// Loads a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Contact</returns>
        Contact ContactsContactidGet (string contactid);

        /// <summary>
        /// Load an individual Contact
        /// </summary>
        /// <remarks>
        /// Loads a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactsContactidGetWithHttpInfo (string contactid);
        /// <summary>
        /// Update a Contact
        /// </summary>
        /// <remarks>
        /// Stores a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>Contact</returns>
        Contact ContactsContactidPut (string contactid, Contact body);

        /// <summary>
        /// Update a Contact
        /// </summary>
        /// <remarks>
        /// Stores a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactsContactidPutWithHttpInfo (string contactid, Contact body);
        /// <summary>
        /// Get the list of Contacts
        /// </summary>
        /// <remarks>
        /// Loads a list of Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>List&lt;Contact&gt;</returns>
        List<Contact> ContactsGet (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null);

        /// <summary>
        /// Get the list of Contacts
        /// </summary>
        /// <remarks>
        /// Loads a list of Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        ApiResponse<List<Contact>> ContactsGetWithHttpInfo (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null);
        /// <summary>
        /// Create a Contact
        /// </summary>
        /// <remarks>
        /// Adds a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Contact</returns>
        Contact ContactsPost (Contact body);

        /// <summary>
        /// Create a Contact
        /// </summary>
        /// <remarks>
        /// Adds a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactsPostWithHttpInfo (Contact body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Contact
        /// </summary>
        /// <remarks>
        /// Deletes a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactsContactidDeleteAsync (string contactid);

        /// <summary>
        /// Delete a Contact
        /// </summary>
        /// <remarks>
        /// Deletes a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactsContactidDeleteAsyncWithHttpInfo (string contactid);
        /// <summary>
        /// Load an individual Contact
        /// </summary>
        /// <remarks>
        /// Loads a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactsContactidGetAsync (string contactid);

        /// <summary>
        /// Load an individual Contact
        /// </summary>
        /// <remarks>
        /// Loads a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsContactidGetAsyncWithHttpInfo (string contactid);
        /// <summary>
        /// Update a Contact
        /// </summary>
        /// <remarks>
        /// Stores a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactsContactidPutAsync (string contactid, Contact body);

        /// <summary>
        /// Update a Contact
        /// </summary>
        /// <remarks>
        /// Stores a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsContactidPutAsyncWithHttpInfo (string contactid, Contact body);
        /// <summary>
        /// Get the list of Contacts
        /// </summary>
        /// <remarks>
        /// Loads a list of Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        System.Threading.Tasks.Task<List<Contact>> ContactsGetAsync (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null);

        /// <summary>
        /// Get the list of Contacts
        /// </summary>
        /// <remarks>
        /// Loads a list of Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contact>>> ContactsGetAsyncWithHttpInfo (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null);
        /// <summary>
        /// Create a Contact
        /// </summary>
        /// <remarks>
        /// Adds a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactsPostAsync (Contact body);

        /// <summary>
        /// Create a Contact
        /// </summary>
        /// <remarks>
        /// Adds a Contact
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsPostAsyncWithHttpInfo (Contact body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a Contact Deletes a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns></returns>
        public void ContactsContactidDelete (string contactid)
        {
             ContactsContactidDeleteWithHttpInfo(contactid);
        }

        /// <summary>
        /// Delete a Contact Deletes a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactsContactidDeleteWithHttpInfo (string contactid)
        {
            // verify the required parameter 'contactid' is set
            if (contactid == null)
                throw new ApiException(400, "Missing required parameter 'contactid' when calling ContactsApi->ContactsContactidDelete");

            var localVarPath = "/contacts/{contactid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactid != null) localVarPathParams.Add("contactid", Configuration.ApiClient.ParameterToString(contactid)); // path parameter

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsContactidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Contact Deletes a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactsContactidDeleteAsync (string contactid)
        {
             await ContactsContactidDeleteAsyncWithHttpInfo(contactid);

        }

        /// <summary>
        /// Delete a Contact Deletes a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactsContactidDeleteAsyncWithHttpInfo (string contactid)
        {
            // verify the required parameter 'contactid' is set
            if (contactid == null)
                throw new ApiException(400, "Missing required parameter 'contactid' when calling ContactsApi->ContactsContactidDelete");

            var localVarPath = "/contacts/{contactid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactid != null) localVarPathParams.Add("contactid", Configuration.ApiClient.ParameterToString(contactid)); // path parameter

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsContactidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Load an individual Contact Loads a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Contact</returns>
        public Contact ContactsContactidGet (string contactid)
        {
             ApiResponse<Contact> localVarResponse = ContactsContactidGetWithHttpInfo(contactid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load an individual Contact Loads a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > ContactsContactidGetWithHttpInfo (string contactid)
        {
            // verify the required parameter 'contactid' is set
            if (contactid == null)
                throw new ApiException(400, "Missing required parameter 'contactid' when calling ContactsApi->ContactsContactidGet");

            var localVarPath = "/contacts/{contactid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactid != null) localVarPathParams.Add("contactid", Configuration.ApiClient.ParameterToString(contactid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsContactidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
            
        }

        /// <summary>
        /// Load an individual Contact Loads a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactsContactidGetAsync (string contactid)
        {
             ApiResponse<Contact> localVarResponse = await ContactsContactidGetAsyncWithHttpInfo(contactid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load an individual Contact Loads a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsContactidGetAsyncWithHttpInfo (string contactid)
        {
            // verify the required parameter 'contactid' is set
            if (contactid == null)
                throw new ApiException(400, "Missing required parameter 'contactid' when calling ContactsApi->ContactsContactidGet");

            var localVarPath = "/contacts/{contactid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactid != null) localVarPathParams.Add("contactid", Configuration.ApiClient.ParameterToString(contactid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsContactidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
            
        }

        /// <summary>
        /// Update a Contact Stores a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>Contact</returns>
        public Contact ContactsContactidPut (string contactid, Contact body)
        {
             ApiResponse<Contact> localVarResponse = ContactsContactidPutWithHttpInfo(contactid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Contact Stores a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > ContactsContactidPutWithHttpInfo (string contactid, Contact body)
        {
            // verify the required parameter 'contactid' is set
            if (contactid == null)
                throw new ApiException(400, "Missing required parameter 'contactid' when calling ContactsApi->ContactsContactidPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsApi->ContactsContactidPut");

            var localVarPath = "/contacts/{contactid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactid != null) localVarPathParams.Add("contactid", Configuration.ApiClient.ParameterToString(contactid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsContactidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
            
        }

        /// <summary>
        /// Update a Contact Stores a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactsContactidPutAsync (string contactid, Contact body)
        {
             ApiResponse<Contact> localVarResponse = await ContactsContactidPutAsyncWithHttpInfo(contactid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Contact Stores a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsContactidPutAsyncWithHttpInfo (string contactid, Contact body)
        {
            // verify the required parameter 'contactid' is set
            if (contactid == null)
                throw new ApiException(400, "Missing required parameter 'contactid' when calling ContactsApi->ContactsContactidPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsApi->ContactsContactidPut");

            var localVarPath = "/contacts/{contactid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactid != null) localVarPathParams.Add("contactid", Configuration.ApiClient.ParameterToString(contactid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsContactidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
            
        }

        /// <summary>
        /// Get the list of Contacts Loads a list of Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>List&lt;Contact&gt;</returns>
        public List<Contact> ContactsGet (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null)
        {
             ApiResponse<List<Contact>> localVarResponse = ContactsGetWithHttpInfo(size, page, sort, firstName, lastName, active, company);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of Contacts Loads a list of Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        public ApiResponse< List<Contact> > ContactsGetWithHttpInfo (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null)
        {

            var localVarPath = "/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("$size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("$page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (sort != null) localVarQueryParams.Add("$sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (firstName != null) localVarQueryParams.Add("firstName", Configuration.ApiClient.ParameterToString(firstName)); // query parameter
            if (lastName != null) localVarQueryParams.Add("lastName", Configuration.ApiClient.ParameterToString(lastName)); // query parameter
            if (active != null) localVarQueryParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // query parameter
            if (company != null) localVarQueryParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contact>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contact>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contact>)));
            
        }

        /// <summary>
        /// Get the list of Contacts Loads a list of Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contact>> ContactsGetAsync (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null)
        {
             ApiResponse<List<Contact>> localVarResponse = await ContactsGetAsyncWithHttpInfo(size, page, sort, firstName, lastName, active, company);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of Contacts Loads a list of Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Size of the page to retrieve. (optional)</param>
        /// <param name="page">Number of the page to retrieve. (optional)</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed. (optional)</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName (optional)</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName (optional)</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active (optional)</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contact>>> ContactsGetAsyncWithHttpInfo (int? size = null, int? page = null, string sort = null, string firstName = null, string lastName = null, bool? active = null, string company = null)
        {

            var localVarPath = "/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("$size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("$page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (sort != null) localVarQueryParams.Add("$sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (firstName != null) localVarQueryParams.Add("firstName", Configuration.ApiClient.ParameterToString(firstName)); // query parameter
            if (lastName != null) localVarQueryParams.Add("lastName", Configuration.ApiClient.ParameterToString(lastName)); // query parameter
            if (active != null) localVarQueryParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // query parameter
            if (company != null) localVarQueryParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contact>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contact>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contact>)));
            
        }

        /// <summary>
        /// Create a Contact Adds a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Contact</returns>
        public Contact ContactsPost (Contact body)
        {
             ApiResponse<Contact> localVarResponse = ContactsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Contact Adds a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > ContactsPostWithHttpInfo (Contact body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsApi->ContactsPost");

            var localVarPath = "/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
            
        }

        /// <summary>
        /// Create a Contact Adds a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactsPostAsync (Contact body)
        {
             ApiResponse<Contact> localVarResponse = await ContactsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Contact Adds a Contact
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsPostAsyncWithHttpInfo (Contact body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsApi->ContactsPost");

            var localVarPath = "/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (HTTP_BASIC) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
            
        }

    }
}

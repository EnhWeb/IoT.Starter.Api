/* 
 * API Cadastro
 *
 * Teste para workflow API-based:   - Restlet gera API e exporta swagger.json   - SwaggerHub importa arquivo e gera server stub   - Instala server stub em docker repo: io.swagger   - Compila em máquina x64 e gera linux-arm: io.swagger   - Docker push josemottalopes/io.swagger   - Na Raspberry Pi, com hostname \"pi\", instala-se o Docker   - Docker run -d josemottalopes/io.swagger   - Retorna à maquina x64 e acessa o pi-server-stub via browser   - http://pi:5000/swagger/ui/index.html    
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ContactsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ContactsApiTests
    {
        private ContactsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContactsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContactsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ContactsApi
            //Assert.IsInstanceOfType(typeof(ContactsApi), instance, "instance is a ContactsApi");
        }

        
        /// <summary>
        /// Test ContactsContactidDelete
        /// </summary>
        [Test]
        public void ContactsContactidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactid = null;
            //instance.ContactsContactidDelete(contactid);
            
        }
        
        /// <summary>
        /// Test ContactsContactidGet
        /// </summary>
        [Test]
        public void ContactsContactidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactid = null;
            //var response = instance.ContactsContactidGet(contactid);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test ContactsContactidPut
        /// </summary>
        [Test]
        public void ContactsContactidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactid = null;
            //Contact body = null;
            //var response = instance.ContactsContactidPut(contactid, body);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test ContactsGet
        /// </summary>
        [Test]
        public void ContactsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string sort = null;
            //string firstName = null;
            //string lastName = null;
            //bool? active = null;
            //string company = null;
            //var response = instance.ContactsGet(size, page, sort, firstName, lastName, active, company);
            //Assert.IsInstanceOf<List<Contact>> (response, "response is List<Contact>");
        }
        
        /// <summary>
        /// Test ContactsPost
        /// </summary>
        [Test]
        public void ContactsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Contact body = null;
            //var response = instance.ContactsPost(body);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
    }

}

/*
 * API Cadastro
 *
 * Teste para workflow API-based:   - Restlet gera API e exporta swagger.json   - SwaggerHub importa arquivo e gera server stub   - Instala server stub em docker repo: io.swagger   - Compila em máquina x64 e gera linux-arm: io.swagger   - Docker push josemottalopes/io.swagger   - Na Raspberry Pi, com hostname \"pi\", instala-se o Docker   - Docker run -d josemottalopes/io.swagger   - Retorna à maquina x64 e acessa o pi-server-stub via browser   - http://pi:5000/swagger/ui/index.html    Acessos para   
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ContactsApiController : Controller
    { 

        /// <summary>
        /// Delete a Contact
        /// </summary>
        /// <remarks>Deletes a Contact</remarks>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <response code="200">Status 200</response>
        [HttpDelete]
        [Route("/contacts/{contactid}")]
        [SwaggerOperation("ContactsContactidDelete")]
        public virtual void ContactsContactidDelete([FromRoute]string contactid)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Load an individual Contact
        /// </summary>
        /// <remarks>Loads a Contact</remarks>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <response code="200">Status 200</response>
        /// <response code="400">Status 400</response>
        [HttpGet]
        [Route("/contacts/{contactid}")]
        [SwaggerOperation("ContactsContactidGet")]
        [SwaggerResponse(200, type: typeof(Contact))]
        public virtual IActionResult ContactsContactidGet([FromRoute]string contactid)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Contact>(exampleJson)
            : default(Contact);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a Contact
        /// </summary>
        /// <remarks>Stores a Contact</remarks>
        /// <param name="contactid">Identifier of the Contact</param>
        /// <param name="body"></param>
        /// <response code="200">Status 200</response>
        [HttpPut]
        [Route("/contacts/{contactid}")]
        [SwaggerOperation("ContactsContactidPut")]
        [SwaggerResponse(200, type: typeof(Contact))]
        public virtual IActionResult ContactsContactidPut([FromRoute]string contactid, [FromBody]Contact body)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Contact>(exampleJson)
            : default(Contact);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get the list of Contacts
        /// </summary>
        /// <remarks>Loads a list of Contact</remarks>
        /// <param name="size">Size of the page to retrieve.</param>
        /// <param name="page">Number of the page to retrieve.</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can be passed.</param>
        /// <param name="firstName">Allows to filter the collections of result by the value of field firstName</param>
        /// <param name="lastName">Allows to filter the collections of result by the value of field lastName</param>
        /// <param name="active">Allows to filter the collections of result by the value of field active</param>
        /// <param name="company">Allows to filter the collections of result by the value of field company</param>
        /// <response code="200">Status 200</response>
        /// <response code="400">Status 400</response>
        [HttpGet]
        [Route("/contacts/")]
        [SwaggerOperation("ContactsGet")]
        [SwaggerResponse(200, type: typeof(List<Contact>))]
        public virtual IActionResult ContactsGet([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string sort, [FromQuery]string firstName, [FromQuery]string lastName, [FromQuery]bool? active, [FromQuery]string company)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Contact>>(exampleJson)
            : default(List<Contact>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a Contact
        /// </summary>
        /// <remarks>Adds a Contact</remarks>
        /// <param name="body"></param>
        /// <response code="200">Status 200</response>
        [HttpPost]
        [Route("/contacts/")]
        [SwaggerOperation("ContactsPost")]
        [SwaggerResponse(200, type: typeof(Contact))]
        public virtual IActionResult ContactsPost([FromBody]Contact body)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Contact>(exampleJson)
            : default(Contact);
            return new ObjectResult(example);
        }
    }
}
